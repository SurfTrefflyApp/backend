// Code generated by MockGen. DO NOT EDIT.
// Source: treffly/api/handler/event (interfaces: crudService,ImageService)
//
// Generated by this command:
//
//	mockgen -destination=./mock/service.go -package=mock . crudService,ImageService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"
	models "treffly/api/models"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockcrudService is a mock of crudService interface.
type MockcrudService struct {
	ctrl     *gomock.Controller
	recorder *MockcrudServiceMockRecorder
	isgomock struct{}
}

// MockcrudServiceMockRecorder is the mock recorder for MockcrudService.
type MockcrudServiceMockRecorder struct {
	mock *MockcrudService
}

// NewMockcrudService creates a new mock instance.
func NewMockcrudService(ctrl *gomock.Controller) *MockcrudService {
	mock := &MockcrudService{ctrl: ctrl}
	mock.recorder = &MockcrudServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcrudService) EXPECT() *MockcrudServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcrudService) Create(ctx context.Context, params models.CreateParams) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcrudServiceMockRecorder) Create(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcrudService)(nil).Create), ctx, params)
}

// Delete mocks base method.
func (m *MockcrudService) Delete(ctx context.Context, params models.DeleteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockcrudServiceMockRecorder) Delete(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcrudService)(nil).Delete), ctx, params)
}

// GetEvent mocks base method.
func (m *MockcrudService) GetEvent(ctx context.Context, eventID, userID int32, token string) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, eventID, userID, token)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockcrudServiceMockRecorder) GetEvent(ctx, eventID, userID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockcrudService)(nil).GetEvent), ctx, eventID, userID, token)
}

// List mocks base method.
func (m *MockcrudService) List(ctx context.Context, params models.ListParams) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockcrudServiceMockRecorder) List(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockcrudService)(nil).List), ctx, params)
}

// Update mocks base method.
func (m *MockcrudService) Update(ctx context.Context, params models.UpdateParams) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, params)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockcrudServiceMockRecorder) Update(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcrudService)(nil).Update), ctx, params)
}

// MockImageService is a mock of ImageService interface.
type MockImageService struct {
	ctrl     *gomock.Controller
	recorder *MockImageServiceMockRecorder
	isgomock struct{}
}

// MockImageServiceMockRecorder is the mock recorder for MockImageService.
type MockImageServiceMockRecorder struct {
	mock *MockImageService
}

// NewMockImageService creates a new mock instance.
func NewMockImageService(ctrl *gomock.Controller) *MockImageService {
	mock := &MockImageService{ctrl: ctrl}
	mock.recorder = &MockImageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageService) EXPECT() *MockImageServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockImageService) Delete(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageServiceMockRecorder) Delete(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageService)(nil).Delete), path)
}

// GetDBImageByEventID mocks base method.
func (m *MockImageService) GetDBImageByEventID(ctx context.Context, eventID int32) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBImageByEventID", ctx, eventID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDBImageByEventID indicates an expected call of GetDBImageByEventID.
func (mr *MockImageServiceMockRecorder) GetDBImageByEventID(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBImageByEventID", reflect.TypeOf((*MockImageService)(nil).GetDBImageByEventID), ctx, eventID)
}

// Upload mocks base method.
func (m *MockImageService) Upload(file multipart.File, header *multipart.FileHeader, objType, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file, header, objType, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockImageServiceMockRecorder) Upload(file, header, objType, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImageService)(nil).Upload), file, header, objType, id)
}
