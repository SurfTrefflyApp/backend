name: Backend CD

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          printf "%s" "${{ secrets.SSH_PASSPHRASE }}" | ssh-add -v ~/.ssh/id_rsa
          ssh-keyscan -v -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: List files
        run: ls -la

      - name: Create app.env file
        run: |
          echo "DB_DRIVER=pgx" > app.env
          echo "DB_SOURCE=${{ secrets.DB_SOURCE }}" >> app.env
          echo "SERVER_ADDRESS=${{ secrets.SERVER_ADDRESS }}" >> app.env
          echo "TOKEN_SYMMETRIC_KEY=${{ secrets.TOKEN_SYMMETRIC_KEY }}" >> app.env
          echo "ACCESS_TOKEN_DURATION=${{ secrets.ACCESS_TOKEN_DURATION }}" >> app.env
          echo "REFRESH_TOKEN_DURATION=${{ secrets.REFRESH_TOKEN_DURATION }}" >> app.env
          echo "Y_SUGGESTER_API=${{ secrets.Y_SUGGESTER_API }}" >> app.env
          echo "Y_GEOCODER_API=${{ secrets.Y_GEOCODER_API }}" >> app.env
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> app.env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> app.env
          echo "IMAGE_BASE_PATH=${{ secrets.IMAGE_BASE_PATH }}" >> app.env
          echo "GEN_BASE_URL=${{ secrets.GEN_BASE_URL }}" >> app.env
          echo "GEN_API_KEY=${{ secrets.GEN_API_KEY }}" >> app.env
          echo "GEN_SYSTEM_PROMPT=${{ secrets.GEN_SYSTEM_PROMPT }}" >> app.env
          echo "GEN_MODEL=${{ secrets.GEN_MODEL }}" >> app.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> app.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> app.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> app.env
          echo "REDIS_DB=${{ secrets.REDIS_DB }}" >> app.env
          echo "GEN_LIMIT=${{ secrets.GEN_LIMIT }}" >> app.env
          echo "GEN_TIMEOUT=${{ secrets.GEN_TIMEOUT }}" >> app.env
          
          echo "RESET_CODE_TTL=${{ secrets.RESET_CODE_TTL }}" >> app.env 
          echo "RESET_CODE_LENGTH=${{ secrets.RESET_CODE_LENGTH }}" >> app.env
          echo "RESET_TOKEN_DURATION=${{ secrets.RESET_TOKEN_DURATION }}" >> app.env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> app.env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> app.env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> app.env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> app.env
          echo "SMTP_DEFAULT_FROM=${{ secrets.SMTP_DEFAULT_FROM }}" >> app.env
          echo "SEND_CODE_RATE_LIMIT=${{ secrets.SEND_CODE_RATE_LIMIT }}" >> app.env

      - name: Copy files to the server
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/id_rsa
          scp ./docker-compose.yml ./Caddyfile ./app.env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.APP_PATH }}/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image for backend
        run: |
          docker build -t m1ll3r1337/treffly-server:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push m1ll3r1337/treffly-server:latest

      - name: Deploy backend to server
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
          cd ${{ secrets.APP_PATH }} &&
          docker compose pull backend &&
          docker compose up -d 
          docker system prune -f
          ENDSSH

