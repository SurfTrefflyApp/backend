// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tag.sql

package db

import (
	"context"
)

const addUserTag = `-- name: AddUserTag :one
INSERT INTO user_tags (user_id, tag_id)
VALUES ($1, $2)
ON CONFLICT (user_id, tag_id) DO NOTHING
RETURNING user_id, tag_id
`

type AddUserTagParams struct {
	UserID int32 `json:"user_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddUserTag(ctx context.Context, arg AddUserTagParams) (UserTag, error) {
	row := q.db.QueryRow(ctx, addUserTag, arg.UserID, arg.TagID)
	var i UserTag
	err := row.Scan(&i.UserID, &i.TagID)
	return i, err
}

const deleteUserTag = `-- name: DeleteUserTag :exec
DELETE FROM user_tags
WHERE user_id = $1 AND tag_id = $2
`

type DeleteUserTagParams struct {
	UserID int32 `json:"user_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) DeleteUserTag(ctx context.Context, arg DeleteUserTagParams) error {
	_, err := q.db.Exec(ctx, deleteUserTag, arg.UserID, arg.TagID)
	return err
}

const getTags = `-- name: GetTags :many
SELECT id, name FROM tags
ORDER BY id
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
