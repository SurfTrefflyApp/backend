// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tag.sql

package db

import (
	"context"
)

const addEventTag = `-- name: AddEventTag :one
INSERT INTO event_tags (event_id, tag_id)
VALUES ($1, $2)
RETURNING event_id, tag_id
`

type AddEventTagParams struct {
	EventID int32 `json:"event_id"`
	TagID   int32 `json:"tag_id"`
}

func (q *Queries) AddEventTag(ctx context.Context, arg AddEventTagParams) (EventTag, error) {
	row := q.db.QueryRow(ctx, addEventTag, arg.EventID, arg.TagID)
	var i EventTag
	err := row.Scan(&i.EventID, &i.TagID)
	return i, err
}

const addUserTags = `-- name: AddUserTags :exec
INSERT INTO user_tags (user_id, tag_id)
SELECT $1, unnest($2::int[])
`

type AddUserTagsParams struct {
	UserID int32   `json:"user_id"`
	Tags   []int32 `json:"tags"`
}

func (q *Queries) AddUserTags(ctx context.Context, arg AddUserTagsParams) error {
	_, err := q.db.Exec(ctx, addUserTags, arg.UserID, arg.Tags)
	return err
}

const deleteAllEventTags = `-- name: DeleteAllEventTags :exec
DELETE FROM event_tags
WHERE event_id = $1
`

func (q *Queries) DeleteAllEventTags(ctx context.Context, eventID int32) error {
	_, err := q.db.Exec(ctx, deleteAllEventTags, eventID)
	return err
}

const deleteUserTags = `-- name: DeleteUserTags :exec
DELETE FROM user_tags
WHERE user_id = $1
`

func (q *Queries) DeleteUserTags(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserTags, userID)
	return err
}

const getAllUserTags = `-- name: GetAllUserTags :one
SELECT tags FROM user_with_tags_view WHERE id = $1
`

func (q *Queries) GetAllUserTags(ctx context.Context, id int32) ([]Tag, error) {
	row := q.db.QueryRow(ctx, getAllUserTags, id)
	var tags []Tag
	err := row.Scan(&tags)
	return tags, err
}

const getTags = `-- name: GetTags :many
SELECT id, name FROM tags
ORDER BY id
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
