// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username,
                   email,
                   password_hash)
VALUES ($1, $2, $3) RETURNING id, username, email, password_hash, created_at, is_admin
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, created_at, is_admin FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, is_admin FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getUserWithTags = `-- name: GetUserWithTags :one
SELECT id, username, email, created_at, tags FROM user_with_tags_view WHERE id = $1
`

func (q *Queries) GetUserWithTags(ctx context.Context, id int32) (UserWithTagsView, error) {
	row := q.db.QueryRow(ctx, getUserWithTags, id)
	var i UserWithTagsView
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Tags,
	)
	return i, err
}

const isParticipant = `-- name: IsParticipant :one
SELECT EXISTS (
    SELECT 1
    FROM event_user
    WHERE event_id = $1
      AND user_id = $2
) AS is_participant
`

type IsParticipantParams struct {
	EventID int32 `json:"event_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) IsParticipant(ctx context.Context, arg IsParticipantParams) (bool, error) {
	row := q.db.QueryRow(ctx, isParticipant, arg.EventID, arg.UserID)
	var is_participant bool
	err := row.Scan(&is_participant)
	return is_participant, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password_hash, created_at, is_admin FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscribeToEvent = `-- name: SubscribeToEvent :exec
INSERT INTO event_user (user_id, event_id)
VALUES ($1, $2)
`

type SubscribeToEventParams struct {
	UserID  int32 `json:"user_id"`
	EventID int32 `json:"event_id"`
}

func (q *Queries) SubscribeToEvent(ctx context.Context, arg SubscribeToEventParams) error {
	_, err := q.db.Exec(ctx, subscribeToEvent, arg.UserID, arg.EventID)
	return err
}

const unsubscribeFromEvent = `-- name: UnsubscribeFromEvent :exec
DELETE FROM event_user
WHERE user_id = $1 AND event_id = $2
`

type UnsubscribeFromEventParams struct {
	UserID  int32 `json:"user_id"`
	EventID int32 `json:"event_id"`
}

func (q *Queries) UnsubscribeFromEvent(ctx context.Context, arg UnsubscribeFromEventParams) error {
	_, err := q.db.Exec(ctx, unsubscribeFromEvent, arg.UserID, arg.EventID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2
WHERE id = $1
RETURNING id, username, email, password_hash, created_at, is_admin
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsAdmin,
	)
	return i, err
}
