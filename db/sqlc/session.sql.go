// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
                      uuid,
                      user_id,
                      refresh_token,
                      expires_at,
                      is_blocked
) VALUES (
          $1, $2, $3, $4, $5
         ) RETURNING uuid, user_id, refresh_token, expires_at, is_blocked, created_at
`

type CreateSessionParams struct {
	Uuid         uuid.UUID `json:"uuid"`
	UserID       int32     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
	IsBlocked    bool      `json:"is_blocked"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession,
		arg.Uuid,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.IsBlocked,
	)
	return err
}

const getSession = `-- name: GetSession :one
SELECT uuid, user_id, refresh_token, expires_at, is_blocked, created_at FROM sessions
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, argUuid uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, argUuid)
	var i Session
	err := row.Scan(
		&i.Uuid,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.CreatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET uuid = $1, refresh_token = $2, expires_at = $3
WHERE uuid = $4
RETURNING uuid, user_id, refresh_token, expires_at, is_blocked, created_at
`

type UpdateSessionParams struct {
	NewUuid      uuid.UUID `json:"new_uuid"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
	OldUuid      uuid.UUID `json:"old_uuid"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession,
		arg.NewUuid,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.OldUuid,
	)
	return err
}
