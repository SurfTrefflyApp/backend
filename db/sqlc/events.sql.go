// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    is_private
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             $8,
             $9
         )
    RETURNING id, name, description, capacity, latitude, longitude,
    address, date, owner_id, is_private, is_premium, created_at
`

type CreateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
}

type CreateEventRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
	IsPremium   bool           `json:"is_premium"`
	CreatedAt   time.Time      `json:"created_at"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (CreateEventRow, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.OwnerID,
		arg.IsPrivate,
	)
	var i CreateEventRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE id = $1
`

type GetEventRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetEvent(ctx context.Context, id int32) (GetEventRow, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i GetEventRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.OwnerUsername,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
		&i.Tags,
		&i.ParticipantsCount,
	)
	return i, err
}

const getGuestRecommendedEvents = `-- name: GetGuestRecommendedEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE date > NOW()
  AND ST_DWithin(
    geom,
    ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY,
    100000
    )
ORDER BY ST_Distance(geom, ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY) ASC,
    created_at DESC
    LIMIT 6
`

type GetGuestRecommendedEventsParams struct {
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
}

type GetGuestRecommendedEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetGuestRecommendedEvents(ctx context.Context, arg GetGuestRecommendedEventsParams) ([]GetGuestRecommendedEventsRow, error) {
	rows, err := q.db.Query(ctx, getGuestRecommendedEvents, arg.UserLon, arg.UserLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuestRecommendedEventsRow{}
	for rows.Next() {
		var i GetGuestRecommendedEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestEvents = `-- name: GetLatestEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE date > NOW()
ORDER BY created_at DESC
    LIMIT 6
`

type GetLatestEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetLatestEvents(ctx context.Context) ([]GetLatestEventsRow, error) {
	rows, err := q.db.Query(ctx, getLatestEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestEventsRow{}
	for rows.Next() {
		var i GetLatestEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPastUserEvents = `-- name: GetPastUserEvents :many
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.participants_count
FROM event_with_tags_view e
         JOIN event_user eu ON e.id = eu.event_id
WHERE
    eu.user_id = $1
  AND e.date < NOW()
ORDER BY
    e.date DESC
`

type GetPastUserEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetPastUserEvents(ctx context.Context, userID int32) ([]GetPastUserEventsRow, error) {
	rows, err := q.db.Query(ctx, getPastUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPastUserEventsRow{}
	for rows.Next() {
		var i GetPastUserEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularEvents = `-- name: GetPopularEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE date > NOW()
ORDER BY participants_count DESC, created_at DESC
    LIMIT 6
`

type GetPopularEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetPopularEvents(ctx context.Context) ([]GetPopularEventsRow, error) {
	rows, err := q.db.Query(ctx, getPopularEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPopularEventsRow{}
	for rows.Next() {
		var i GetPopularEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPremiumEvents = `-- name: GetPremiumEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE is_premium = TRUE
  AND date > NOW()
ORDER BY created_at DESC
    LIMIT 6
`

type GetPremiumEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetPremiumEvents(ctx context.Context) ([]GetPremiumEventsRow, error) {
	rows, err := q.db.Query(ctx, getPremiumEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPremiumEventsRow{}
	for rows.Next() {
		var i GetPremiumEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpcomingUserEvents = `-- name: GetUpcomingUserEvents :many
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.participants_count
FROM event_with_tags_view e
         JOIN event_user eu ON e.id = eu.event_id
WHERE
    eu.user_id = $1
  AND e.date > NOW()
ORDER BY
    e.date ASC
`

type GetUpcomingUserEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetUpcomingUserEvents(ctx context.Context, userID int32) ([]GetUpcomingUserEventsRow, error) {
	rows, err := q.db.Query(ctx, getUpcomingUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUpcomingUserEventsRow{}
	for rows.Next() {
		var i GetUpcomingUserEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRecommendedEvents = `-- name: GetUserRecommendedEvents :many
WITH user_tags AS (
    SELECT (tag->>'id')::INT AS tag_id
    FROM user_with_tags_view,
         json_array_elements(tags) AS tag
    WHERE user_with_tags_view.id = $1
),
     ranked_events AS (
         SELECT
             evt.id,
             evt.name,
             evt.description,
             evt.capacity,
             evt.latitude,
             evt.longitude,
             evt.address,
             evt.date,
             evt.owner_id,
             evt.owner_username,
             evt.is_private,
             evt.is_premium,
             evt.created_at,
             evt.tags,
             evt.participants_count,
             COUNT(et.tag_id) AS matched_tags,
             ST_Distance(
                     evt.geom,
                     ST_MakePoint($2::numeric, $3::numeric)::GEOGRAPHY
             ) AS distance
         FROM event_with_tags_view evt
                  LEFT JOIN event_tags et
                            ON evt.id = et.event_id
                                AND et.tag_id IN (SELECT tag_id FROM user_tags)
         WHERE evt.date > NOW()
           AND ST_DWithin(
                 evt.geom,
                 ST_MakePoint($2::numeric, $3::numeric)::GEOGRAPHY,
                 100000
               )
         GROUP BY evt.id
     )
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM ranked_events
ORDER BY matched_tags DESC, created_at DESC, distance ASC
    LIMIT 6
`

type GetUserRecommendedEventsParams struct {
	UserID  int32          `json:"user_id"`
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
}

type GetUserRecommendedEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) GetUserRecommendedEvents(ctx context.Context, arg GetUserRecommendedEventsParams) ([]GetUserRecommendedEventsRow, error) {
	rows, err := q.db.Query(ctx, getUserRecommendedEvents, arg.UserID, arg.UserLon, arg.UserLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRecommendedEventsRow{}
	for rows.Next() {
		var i GetUserRecommendedEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count
FROM event_with_tags_view
WHERE ST_DWithin(
    geom,
    ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY,
    100000
    )
ORDER BY id
`

type ListEventsParams struct {
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
}

type ListEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]ListEventsRow, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.UserLon, arg.UserLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventsRow{}
	for rows.Next() {
		var i ListEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET
    name = $1,
    description = $2,
    capacity = $3,
    latitude = $4,
    longitude = $5,
    address = $6,
    date = $7,
    is_private = $8
WHERE id = $9
`

type UpdateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	IsPrivate   bool           `json:"is_private"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.IsPrivate,
		arg.ID,
	)
	return err
}
