// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    is_private
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             $8,
             $9
         )
    RETURNING id, name, description, capacity, latitude, longitude, address, date, owner_id, is_private, is_premium, created_at
`

type CreateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.OwnerID,
		arg.IsPrivate,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, description, capacity, latitude, longitude, address, date, owner_id, is_private, is_premium, created_at, tags FROM event_with_tags_view
WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (EventWithTagsView, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i EventWithTagsView
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
		&i.Tags,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, description, capacity, latitude, longitude, address, date, owner_id, is_private, is_premium, created_at, tags FROM event_with_tags_view
WHERE ST_DWithin(
              ST_MakePoint(longitude, latitude)::GEOGRAPHY,
              ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY,
              100000
      )
ORDER BY id
`

type ListEventsParams struct {
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]EventWithTagsView, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.UserLon, arg.UserLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventWithTagsView{}
	for rows.Next() {
		var i EventWithTagsView
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
    name = $1,
    description = $2,
    capacity = $3,
    latitude = $4,
    longitude = $5,
    address = $6,
    date = $7,
    is_private = $8
WHERE id = $9
    RETURNING id, name, description, capacity, latitude, longitude, address, date, owner_id, is_private, is_premium, created_at
`

type UpdateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	IsPrivate   bool           `json:"is_private"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.IsPrivate,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
	)
	return i, err
}
