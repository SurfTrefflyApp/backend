// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type OrdersStatus string

const (
	OrdersStatusPending  OrdersStatus = "pending"
	OrdersStatusComplete OrdersStatus = "complete"
)

func (e *OrdersStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrdersStatus(s)
	case string:
		*e = OrdersStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrdersStatus: %T", src)
	}
	return nil
}

type NullOrdersStatus struct {
	OrdersStatus OrdersStatus `json:"orders_status"`
	Valid        bool         `json:"valid"` // Valid is true if OrdersStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdersStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrdersStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrdersStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdersStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrdersStatus), nil
}

type Event struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
	IsPremium   bool           `json:"is_premium"`
	CreatedAt   time.Time      `json:"created_at"`
	Geom        interface{}    `json:"geom"`
	ImageID     pgtype.UUID    `json:"image_id"`
}

type EventTag struct {
	EventID int32 `json:"event_id"`
	TagID   int32 `json:"tag_id"`
}

type EventToken struct {
	EventID   int32     `json:"event_id"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
}

type EventUser struct {
	UserID  int32 `json:"user_id"`
	EventID int32 `json:"event_id"`
}

type EventWithTagsView struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	Geom              interface{}    `json:"geom"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
	ImageID           pgtype.UUID    `json:"image_id"`
}

type Image struct {
	ID   uuid.UUID `json:"id"`
	Path string    `json:"path"`
}

type PremiumOrder struct {
	ID        int32          `json:"id"`
	UserID    int32          `json:"user_id"`
	EventID   int32          `json:"event_id"`
	Shop      string         `json:"shop"`
	Price     pgtype.Numeric `json:"price"`
	Status    string         `json:"status"`
	CreatedAt time.Time      `json:"created_at"`
}

type Session struct {
	Uuid         uuid.UUID `json:"uuid"`
	UserID       int32     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
	IsBlocked    bool      `json:"is_blocked"`
	CreatedAt    time.Time `json:"created_at"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	ID           int32       `json:"id"`
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	CreatedAt    time.Time   `json:"created_at"`
	IsAdmin      bool        `json:"is_admin"`
	ImageID      pgtype.UUID `json:"image_id"`
}

type UserTag struct {
	UserID int32 `json:"user_id"`
	TagID  int32 `json:"tag_id"`
}

type UserWithTagsView struct {
	ID        int32       `json:"id"`
	Username  string      `json:"username"`
	Email     string      `json:"email"`
	CreatedAt time.Time   `json:"created_at"`
	Tags      []Tag       `json:"tags"`
	ImagePath pgtype.Text `json:"image_path"`
}
